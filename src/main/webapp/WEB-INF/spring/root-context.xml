<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	https://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
		https://www.springframework.org/schema/context/spring-context.xsd
	">
	
	
	<!-- Service, DAO, DB관련 등 모든 곳에서 참조해야하는 설정들 여기에 -->
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!--  Date date = new Date(); 
	스프링이 객체를 대신생성해서 만들어줌
	-->
		<bean id = "date" class = "java.util.Date" />
		<!-- -->
		<bean id = "day" class = "java.util.Date" />
		
		<bean id = "chef" class = "com.test.sample.Chef" />
		
		
		<!--  1번째 방법 : 2번보다는 덜쓰인다
			chef의 getmethod를 불러와 value = " "값의 속성을 채워준다. 
			value에 객체를 넣고 싶을 때는 ref로 한다.
			property는 set메서드를 자동으로 불러온다
		-->
		<!-- 
		<bean id = "restaurant" class = "com.test.sample.Restaurant" >
			<property name="chef"  ref  ="chef"></property>
		</bean>
		-->
		
		<!-- 
		<bean id = "chef" class = "com.test.sample.Chef" />
 		-->
 		
 		<!-- 2번째 방법 : 1번째와 같다
 		<context:component-scan base-package="com.test.sample" />
 		-->
 		<context:component-scan base-package="com.test.sample" />
 		
 		<!-- 						->Chef			->Chef
 		 [   ] -> root-context.xml -> Restaurant -> Restaurant 
 		 							^ Chef
 		스피링시작하면 스피링시작을 위한 context 메모리 영역이 시작됌
 		 -->
 		
 		
</beans>
