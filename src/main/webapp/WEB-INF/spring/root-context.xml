<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	https://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
		https://www.springframework.org/schema/context/spring-context.xsd
		http://mybatis.org/schema/mybatis-spring
  		http://mybatis.org/schema/mybatis-spring-1.2.xsd
	">
	
	<!-- Service, DAO, DB관련 등 모든 곳에서 참조해야하는 설정들 여기에 -->
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!--  Date date = new Date(); 
	스프링이 객체를 대신생성해서 만들어줌
		-->	
		<bean id = "date" class = "java.util.Date" />
		
		<bean id = "day" class = "java.util.Date" />
		
		<bean id = "chef" class = "com.test.sample.Chef" />
		
		<!--  DB관련 세팅 -->
		<bean id = "hikariConfig" class = "com.zaxxer.hikari.HikariConfig" >
			<property name="driverClassName" value ="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
			<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@javaking.iptime.org:1521:ORCL"></property>
			<property name="username" value="java01"></property>
			<property name="password" value="java01"></property>
		</bean>
		
		<bean id = "dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close" >
			<constructor-arg ref="hikariConfig"/>
		
		</bean>
		
		<!-- 커넥션 풀 역할
			connection = session(mybatis)
		 -->
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource"></property>
		</bean>
		
		<mybatis-spring:scan base-package="com.test.mapper"/>
		
		<context:component-scan base-package="com.test.sample"></context:component-scan>
		
		
		<!--  스캔추가 -->
		<!--  1번째 방법 : 2번보다는 덜쓰인다
			chef의 getmethod를 불러와 value = " "값의 속성을 채워준다. 
			value에 객체를 넣고 싶을 때는 ref로 한다.
			property는 set메서드를 자동으로 불러온다
		-->
		
		<!-- 
		<bean id = "restaurant" class = "com.test.sample.Restaurant" >
			<property name="chef"  ref  ="chef"></property>
		</bean>
		-->
		
		<!-- 
		<bean id = "chef" class = "com.test.sample.Chef" />
 		-->
 		
 		<!-- 2번째 방법 : 1번째와 같다
 		<context:component-scan base-package="com.test.sample" />
 		-->
 		<context:component-scan base-package="com.test.sample" />
 		<context:component-scan base-package="com.basic.controller" />
 		
 		<!-- 						->Chef			->Chef
 		 [   ] -> root-context.xml -> Restaurant -> Restaurant 
 		 							^ Chef
 		스피링시작하면 스피링시작을 위한 context 메모리 영역이 시작됌
 		 -->
 		 
 		 
 		 
 		 
 		 
 		 
 		 
 		 
 		 <!--  스피링이 객체생성, 
 		 	변수 set해쥼
 		기본생성사 자동으로 만들어진것에 사용/ 사용자가 직접 만든 생성자에는 적용안됌
 		
 		<bean id="hello" class = "com.test.sample.HelloBean">
 			<property name="num" value= "10"></property>
 			<property name="msg" value = "Hello Spring"></property>
 			<property name="reg" ref ="date"/>
 		</bean>
 		 
 		  		 
 		<bean id ="hello" class = "com.test.sample.HelloBean">
 			<constructor-arg  index="0" value ="100"/>
 			<constructor-arg  index="1" value ="hahaha"/>
 			<property name="reg" ref="date"></property>
 		</bean>
 		
 		public HelloBean(int num, String msg, int a, long b)
 		
 		
 		<bean id ="hello" class = "com.test.sample.HelloBean">
 			<constructor-arg  value ="100" type="int"/>
 			<constructor-arg  value ="hahaha" type="java.long.String"/>
 			<property name="reg" ref="date"></property> 
 		</bean>
 		  set메서드 있어야 사용가능하다 -->
</beans>
